/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AppContract extends Truffle.Contract<AppInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppInstance>;
}

export interface ImageCreated {
  name: "ImageCreated";
  args: {
    id: BN;
    hash: string;
    description: string;
    tipAmount: BN;
    author: string;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface ImageTipped {
  name: "ImageTipped";
  args: {
    id: BN;
    hash: string;
    description: string;
    tipAmount: BN;
    author: string;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

type AllEvents = ImageCreated | ImageTipped;

export interface AppInstance extends Truffle.ContractInstance {
  imageCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  images(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: string; 3: BN; 4: string }>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  uploadImage: {
    (
      _imgHash: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _imgHash: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _imgHash: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _imgHash: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tipImageOwner: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    imageCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    images(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: string; 3: BN; 4: string }>;

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    uploadImage: {
      (
        _imgHash: string,
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _imgHash: string,
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _imgHash: string,
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _imgHash: string,
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tipImageOwner: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
